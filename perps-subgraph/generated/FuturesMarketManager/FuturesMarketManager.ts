// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CacheUpdated extends ethereum.Event {
  get params(): CacheUpdated__Params {
    return new CacheUpdated__Params(this);
  }
}

export class CacheUpdated__Params {
  _event: CacheUpdated;

  constructor(event: CacheUpdated) {
    this._event = event;
  }

  get name(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destination(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketAdded extends ethereum.Event {
  get params(): MarketAdded__Params {
    return new MarketAdded__Params(this);
  }
}

export class MarketAdded__Params {
  _event: MarketAdded;

  constructor(event: MarketAdded) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get marketKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class MarketRemoved extends ethereum.Event {
  get params(): MarketRemoved__Params {
    return new MarketRemoved__Params(this);
  }
}

export class MarketRemoved__Params {
  _event: MarketRemoved;

  constructor(event: MarketRemoved) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get marketKey(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class FuturesMarketManager__totalDebtResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getDebt(): BigInt {
    return this.value0;
  }

  getIsInvalid(): boolean {
    return this.value1;
  }
}

export class FuturesMarketManager extends ethereum.SmartContract {
  static bind(address: Address): FuturesMarketManager {
    return new FuturesMarketManager("FuturesMarketManager", address);
  }

  CONTRACT_NAME(): Bytes {
    let result = super.call("CONTRACT_NAME", "CONTRACT_NAME():(bytes32)", []);

    return result[0].toBytes();
  }

  try_CONTRACT_NAME(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTRACT_NAME",
      "CONTRACT_NAME():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allMarkets(): Array<Address> {
    let result = super.call("allMarkets", "allMarkets():(address[])", []);

    return result[0].toAddressArray();
  }

  try_allMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("allMarkets", "allMarkets():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  burnSUSD(account: Address, amount: BigInt): BigInt {
    let result = super.call("burnSUSD", "burnSUSD(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_burnSUSD(account: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnSUSD",
      "burnSUSD(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isResolverCached(): boolean {
    let result = super.call(
      "isResolverCached",
      "isResolverCached():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isResolverCached(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isResolverCached",
      "isResolverCached():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketForKey(param0: Bytes): Address {
    let result = super.call("marketForKey", "marketForKey(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_marketForKey(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketForKey",
      "marketForKey(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  markets(index: BigInt, pageSize: BigInt): Array<Address> {
    let result = super.call("markets", "markets(uint256,uint256):(address[])", [
      ethereum.Value.fromUnsignedBigInt(index),
      ethereum.Value.fromUnsignedBigInt(pageSize)
    ]);

    return result[0].toAddressArray();
  }

  try_markets(
    index: BigInt,
    pageSize: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "markets",
      "markets(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(pageSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  marketsForKeys(marketKeys: Array<Bytes>): Array<Address> {
    let result = super.call(
      "marketsForKeys",
      "marketsForKeys(bytes32[]):(address[])",
      [ethereum.Value.fromFixedBytesArray(marketKeys)]
    );

    return result[0].toAddressArray();
  }

  try_marketsForKeys(
    marketKeys: Array<Bytes>
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "marketsForKeys",
      "marketsForKeys(bytes32[]):(address[])",
      [ethereum.Value.fromFixedBytesArray(marketKeys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  nominatedOwner(): Address {
    let result = super.call("nominatedOwner", "nominatedOwner():(address)", []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nominatedOwner",
      "nominatedOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numMarkets(): BigInt {
    let result = super.call("numMarkets", "numMarkets():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numMarkets(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numMarkets", "numMarkets():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolver(): Address {
    let result = super.call("resolver", "resolver():(address)", []);

    return result[0].toAddress();
  }

  try_resolver(): ethereum.CallResult<Address> {
    let result = super.tryCall("resolver", "resolver():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverAddressesRequired(): Array<Bytes> {
    let result = super.call(
      "resolverAddressesRequired",
      "resolverAddressesRequired():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_resolverAddressesRequired(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "resolverAddressesRequired",
      "resolverAddressesRequired():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  totalDebt(): FuturesMarketManager__totalDebtResult {
    let result = super.call("totalDebt", "totalDebt():(uint256,bool)", []);

    return new FuturesMarketManager__totalDebtResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_totalDebt(): ethereum.CallResult<FuturesMarketManager__totalDebtResult> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256,bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FuturesMarketManager__totalDebtResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddMarketsCall extends ethereum.Call {
  get inputs(): AddMarketsCall__Inputs {
    return new AddMarketsCall__Inputs(this);
  }

  get outputs(): AddMarketsCall__Outputs {
    return new AddMarketsCall__Outputs(this);
  }
}

export class AddMarketsCall__Inputs {
  _call: AddMarketsCall;

  constructor(call: AddMarketsCall) {
    this._call = call;
  }

  get marketsToAdd(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddMarketsCall__Outputs {
  _call: AddMarketsCall;

  constructor(call: AddMarketsCall) {
    this._call = call;
  }
}

export class BurnSUSDCall extends ethereum.Call {
  get inputs(): BurnSUSDCall__Inputs {
    return new BurnSUSDCall__Inputs(this);
  }

  get outputs(): BurnSUSDCall__Outputs {
    return new BurnSUSDCall__Outputs(this);
  }
}

export class BurnSUSDCall__Inputs {
  _call: BurnSUSDCall;

  constructor(call: BurnSUSDCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnSUSDCall__Outputs {
  _call: BurnSUSDCall;

  constructor(call: BurnSUSDCall) {
    this._call = call;
  }

  get postReclamationAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IssueSUSDCall extends ethereum.Call {
  get inputs(): IssueSUSDCall__Inputs {
    return new IssueSUSDCall__Inputs(this);
  }

  get outputs(): IssueSUSDCall__Outputs {
    return new IssueSUSDCall__Outputs(this);
  }
}

export class IssueSUSDCall__Inputs {
  _call: IssueSUSDCall;

  constructor(call: IssueSUSDCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IssueSUSDCall__Outputs {
  _call: IssueSUSDCall;

  constructor(call: IssueSUSDCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class PayFeeCall extends ethereum.Call {
  get inputs(): PayFeeCall__Inputs {
    return new PayFeeCall__Inputs(this);
  }

  get outputs(): PayFeeCall__Outputs {
    return new PayFeeCall__Outputs(this);
  }
}

export class PayFeeCall__Inputs {
  _call: PayFeeCall;

  constructor(call: PayFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayFeeCall__Outputs {
  _call: PayFeeCall;

  constructor(call: PayFeeCall) {
    this._call = call;
  }
}

export class RebuildCacheCall extends ethereum.Call {
  get inputs(): RebuildCacheCall__Inputs {
    return new RebuildCacheCall__Inputs(this);
  }

  get outputs(): RebuildCacheCall__Outputs {
    return new RebuildCacheCall__Outputs(this);
  }
}

export class RebuildCacheCall__Inputs {
  _call: RebuildCacheCall;

  constructor(call: RebuildCacheCall) {
    this._call = call;
  }
}

export class RebuildCacheCall__Outputs {
  _call: RebuildCacheCall;

  constructor(call: RebuildCacheCall) {
    this._call = call;
  }
}

export class RemoveMarketsCall extends ethereum.Call {
  get inputs(): RemoveMarketsCall__Inputs {
    return new RemoveMarketsCall__Inputs(this);
  }

  get outputs(): RemoveMarketsCall__Outputs {
    return new RemoveMarketsCall__Outputs(this);
  }
}

export class RemoveMarketsCall__Inputs {
  _call: RemoveMarketsCall;

  constructor(call: RemoveMarketsCall) {
    this._call = call;
  }

  get marketsToRemove(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveMarketsCall__Outputs {
  _call: RemoveMarketsCall;

  constructor(call: RemoveMarketsCall) {
    this._call = call;
  }
}

export class RemoveMarketsByKeyCall extends ethereum.Call {
  get inputs(): RemoveMarketsByKeyCall__Inputs {
    return new RemoveMarketsByKeyCall__Inputs(this);
  }

  get outputs(): RemoveMarketsByKeyCall__Outputs {
    return new RemoveMarketsByKeyCall__Outputs(this);
  }
}

export class RemoveMarketsByKeyCall__Inputs {
  _call: RemoveMarketsByKeyCall;

  constructor(call: RemoveMarketsByKeyCall) {
    this._call = call;
  }

  get marketKeysToRemove(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class RemoveMarketsByKeyCall__Outputs {
  _call: RemoveMarketsByKeyCall;

  constructor(call: RemoveMarketsByKeyCall) {
    this._call = call;
  }
}
